// Code generated by protoc-gen-go.
// source: adaboost.proto
// DO NOT EDIT!

/*
Package dom_distiller is a generated protocol buffer package.

It is generated from these files:
	adaboost.proto

It has these top-level messages:
	AdaBoostProto
	StumpProto
*/
package dom_distiller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AdaBoostProto struct {
	NumStumps        *int32        `protobuf:"varint,1,req,name=num_stumps" json:"num_stumps,omitempty"`
	NumFeatures      *int32        `protobuf:"varint,2,req,name=num_features" json:"num_features,omitempty"`
	Stump            []*StumpProto `protobuf:"bytes,3,rep,name=stump" json:"stump,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AdaBoostProto) Reset()         { *m = AdaBoostProto{} }
func (m *AdaBoostProto) String() string { return proto.CompactTextString(m) }
func (*AdaBoostProto) ProtoMessage()    {}

func (m *AdaBoostProto) GetNumStumps() int32 {
	if m != nil && m.NumStumps != nil {
		return *m.NumStumps
	}
	return 0
}

func (m *AdaBoostProto) GetNumFeatures() int32 {
	if m != nil && m.NumFeatures != nil {
		return *m.NumFeatures
	}
	return 0
}

func (m *AdaBoostProto) GetStump() []*StumpProto {
	if m != nil {
		return m.Stump
	}
	return nil
}

type StumpProto struct {
	FeatureNumber    *int32   `protobuf:"varint,1,req,name=feature_number" json:"feature_number,omitempty"`
	Split            *float64 `protobuf:"fixed64,2,req,name=split" json:"split,omitempty"`
	Weight           *float64 `protobuf:"fixed64,3,req,name=weight" json:"weight,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StumpProto) Reset()         { *m = StumpProto{} }
func (m *StumpProto) String() string { return proto.CompactTextString(m) }
func (*StumpProto) ProtoMessage()    {}

func (m *StumpProto) GetFeatureNumber() int32 {
	if m != nil && m.FeatureNumber != nil {
		return *m.FeatureNumber
	}
	return 0
}

func (m *StumpProto) GetSplit() float64 {
	if m != nil && m.Split != nil {
		return *m.Split
	}
	return 0
}

func (m *StumpProto) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}
